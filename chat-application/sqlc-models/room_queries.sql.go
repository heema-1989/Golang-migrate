// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: room_queries.sql

package users

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO "rooms" (room_name,user_id)
VALUES ($1,$2) RETURNING id, room_name, user_id
`

type CreateRoomParams struct {
	RoomName string `json:"room_name"`
	UserID   int64  `json:"user_id"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.RoomName, arg.UserID)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.UserID)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT rooms.id,rooms.room_name, users.full_name AS created_by FROM "rooms" INNER JOIN "users" ON rooms.user_id=users.id
`

type GetRoomsRow struct {
	ID        int64  `json:"id"`
	RoomName  string `json:"room_name"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) GetRooms(ctx context.Context) ([]GetRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomsRow
	for rows.Next() {
		var i GetRoomsRow
		if err := rows.Scan(&i.ID, &i.RoomName, &i.CreatedBy); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
