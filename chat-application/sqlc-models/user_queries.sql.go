// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_queries.sql

package users

import (
	"context"

	"github.com/satori/go.uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (full_name,user_name,email,password,verify_id)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, verify_id, full_name, user_name, email, password, created_at, password_create_date, password_update_date
`

type CreateUserParams struct {
	FullName string    `json:"full_name"`
	UserName string    `json:"user_name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
	VerifyID uuid.UUID `json:"verify_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.VerifyID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.VerifyID,
		&i.FullName,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordCreateDate,
		&i.PasswordUpdateDate,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id, verify_id, full_name, user_name, email, password, created_at, password_create_date, password_update_date FROM "users" WHERE email= $1 AND password= $2
`

type GetUserCredentialsParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUserCredentials(ctx context.Context, arg GetUserCredentialsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserCredentials, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.VerifyID,
		&i.FullName,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordCreateDate,
		&i.PasswordUpdateDate,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT id, verify_id, full_name, user_name, email, password, created_at, password_create_date, password_update_date FROM "users" WHERE email= $1
`

func (q *Queries) GetUserEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.VerifyID,
		&i.FullName,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordCreateDate,
		&i.PasswordUpdateDate,
	)
	return i, err
}
